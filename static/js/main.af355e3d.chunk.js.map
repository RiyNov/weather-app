{"version":3,"sources":["components/titles/Titles.js","components/form/Form.js","components/weather/weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","react_default","a","createElement","className","Form","props","onSubmit","getWeather","type","name","placeholder","Weather","city","country","temperature","humidity","description","error","API_KEY","App","state","undefined","_callee","e","API_URL","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","_this","setState","list","main","temp","sys","weather","stop","titles_Titles","form_Form","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.af355e3d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Titles = () => {\r\n    return (\r\n        <div>\r\n            <h1 className=\"title-container__title\">Weather Finder</h1>\r\n            <p className=\"title-container__subtitle\">Find out temperature, conditions and more...</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Titles;","import React from 'react';\r\n\r\nconst Form = (props) => {\r\n    return (\r\n        <form onSubmit = {props.getWeather}>\r\n            <input type=\"text\" name=\"city\" placeholder=\"City (Jakarta)\"/>\r\n            <input type=\"text\" name=\"country\" placeholder=\"Country Initial (ID)\"/>\r\n            <button>Get Weather</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\n\r\nconst Weather = (props) => {\r\n    return (\r\n        <div className=\"weather__info\">\r\n            {\r\n                props.city && props.country && <p className=\"weather__key\">Location : \r\n                    <span className=\"weather__value\"> {props.city} ({props.country})</span>\r\n                </p>\r\n            }\r\n            {\r\n                props.temperature && <p className=\"weather__key\">Temperature : \r\n                    <span className=\"weather__value\"> {props.temperature} Â°C</span>\r\n                </p>\r\n            }\r\n            {\r\n                props.humidity &&  <p className=\"weather__key\">Humidity : \r\n                    <span className=\"weather__value\"> {props.humidity}%</span>\r\n                </p>\r\n            }\r\n            {\r\n                props.description && <p className=\"weather__key\">Condition : \r\n                    <span className=\"weather__value\"> {props.description}</span>\r\n                </p>\r\n            }\r\n            {\r\n                props.error && <p className=\"weather__error\">{props.error}</p>\r\n            }\r\n        </div>\r\n    )\r\n}\r\nexport default Weather;","import React, { Component } from 'react';\nimport './App.css';\n\nimport Titles from './components/titles/Titles';\nimport Form from './components/form/Form';\nimport Weather from './components/weather/weather';\n\nconst API_KEY = 'a4c2151840b2367f9c099b9bcb12efe0';\n\nclass App extends Component {\n\n  state = {\n    temperature : undefined,\n    city : undefined,\n    country : undefined,\n    humidity : undefined,\n    description : undefined,\n    error : undefined\n  }\n\n  getWeather = async (e) => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    const API_URL = await fetch(`https://api.openweathermap.org/data/2.5/find?q=${city},${country}&units=metric&appid=${API_KEY}`);\n    const data = await API_URL.json();\n    if(city && country)\n    {\n      this.setState({\n        temperature : data.list[0].main.temp,\n        city : data.list[0].name,\n        country : data.list[0].sys.country,\n        humidity : data.list[0].main.humidity,\n        description : data.list[0].weather[0].description,\n        error : ''\n      })\n    } else\n    {\n      this.setState({\n        temperature : undefined,\n        city : undefined,\n        country : undefined,\n        humidity : undefined,\n        description : undefined,\n        error : 'Please enter the City and Country'\n      })\n    }\n  }\n\n\n  render() {\n    return (\n      <div>\n        <div className=\"wrapper\">\n          <div className=\"main\">\n            <div className=\"row\">\n              <div className=\"col-xs-5 title-container\">\n                <Titles/>\n              </div>\n              <div className=\"col-xs-7 form-container\">\n                <Form getWeather = {this.getWeather}/>\n                <Weather\n                  temperature = {this.state.temperature}\n                  city = {this.state.city}\n                  country = {this.state.country}\n                  humidity = {this.state.humidity}\n                  description = {this.state.description}\n                  error = {this.state.error}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport './App.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}